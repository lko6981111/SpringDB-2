<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="hello.itemservice.repository.mybatis.ItemMapper">
    <!--자바 코드가 아니기 때문에 src/main/resources 하위에 만들되, 패키지 위치는 맞추어 주어야 한다.-->
    <insert id="save" useGeneratedKeys="true" keyProperty="id">
        insert into item (item_name, price, quantity)
        values (#{itemName}, #{price}, #{quantity})
    </insert>
<!--InsertSQL은 <insert>를 사용, id에는 매퍼 인터페이스에 설정한 메서드 이름을 지정
파라미터는 #{}문법을 사용하면 된다. 그리고 매퍼에서 넘긴 객체의 프로퍼티 이름을 적어주면 된다.
useGeneratedKeys는 데이터베이스가 키를 생성해주는 IDENTITY전략일 때 사용한다. key Property
는 생성되는 키의 속성 이름을 지정한다.
-->


    <update id="update">
        update item
        set item_name=#{updateParam.itemName},
            price=#{updateParam.price},
            quantity=#{updateParam.quantity}
        where id = #{id}
    </update>
<!--
Update SQL은 <update>를 사용하면 된다.
여기서는 파라미터가 Long id, ItemUpdateDto updateParam으로 2개이다. 파라미터가 1개만 있으면
@Param을 지정하지 않아도 되지만, 파라미터가 2개 이상이면 @Param으로 이름을 지정해서 파라미터를 구분해야한다.
-->
    <select id="findById" resultType="Item">
        select id, item_name, price, quantity
        from item
        where id = #{id}
    </select>
<!--
자바 코드에서 반환객체가 하나이면 Item, Optional<Item>과 같이 사용하면 되고, 반환 객체가 하나 이상이면 컬렉션을 사용,
주로 List를 사용
-->

    <select id="findAll" resultType="Item">
        select id, item_name, price, quantity
        from item
        <where>
            <if
                    test="itemName != null and itemName != ''">
                and item_name like concat('%',#{itemName},'%')
--      itemName이 apple이라면 '%apple%'이 되어 item_name에 apple이 포함된 모든 레코드를 검색합니다.
            </if>
            <if
                    test="maxPrice != null">
                and price &lt;= #{maxPrice}
            </if>
        </where>
    </select>
<!--
Mybatis는 <where>, <if>같은 동적 쿼리 문법을 통해 편리한 동적 쿼리를 지원
-->

</mapper>

